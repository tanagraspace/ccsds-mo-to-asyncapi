asyncapi: 3.0.0
info:
  title: Check Service updateDefinition API
  version: 1.0.0
  description: This API allows clients to interact with the updateDefinition interaction of the Check Service.
defaultContentType: application/json
servers:
  production:
    host: 'localhost:{port}'
    protocol: mqtt
    description: MQTT server for the Check Service's updateDefinition interaction.
    variables:
      port:
        default: '8883'
channels:
  request_Check_updateDefinition:
    address: request_Check_updateDefinition
    messages:
      Check.updateDefinition_request.message:
        $ref: '#/components/messages/Check_updateDefinition_request'
    description: >
      Send a **Check_updateDefinition_request** message in this channel to receive a
      **Check_updateDefinition_response** message over the **response_Check_updateDefinition** channel.
  response_Check_updateDefinition:
    address: response_Check_updateDefinition
    messages:
      Check.updateDefinition_response.message:
        $ref: '#/components/messages/Check_updateDefinition_response'
    description: >
      Use this channel to receive Check updateDefinition responses as **Check_updateDefinition_response**
      messages.
  error_Check_updateDefinition:
    address: error_Check_updateDefinition
    messages:
      Check.updateDefinition_error.message:
        $ref: '#/components/messages/Check_updateDefinition_error'
    description: >
      Use this channel to receive Check updateDefinition errors as **Check_updateDefinition_responseErrors**
      messages.
operations:
  Check_updateDefinition_request:
    action: send
    channel:
      $ref: '#/channels/request_Check_updateDefinition'
    messages:
      - $ref: '#/channels/request_Check_updateDefinition/messages/Check.updateDefinition_request.message'
  Check_updateDefinition_response:
    action: receive
    channel:
      $ref: '#/channels/response_Check_updateDefinition'
    messages:
      - $ref: '#/channels/response_Check_updateDefinition/messages/Check.updateDefinition_response.message'
  Check_updateDefinition_error:
    action: receive
    channel:
      $ref: '#/channels/error_Check_updateDefinition'
    messages:
      - $ref: '#/channels/error_Check_updateDefinition/messages/Check.updateDefinition_error.message'
components:
  schemas:
    Check_updateDefinition_request:
      type: object
      properties:
        transactionId:
          type: string
          description: A unique identifier to map the response (receive message) to the request (send message). If no request message exists then this unique identifier can be used to track the sequence order of the received messages.
        checkInstIds:
          type: array
          items:
            type: integer
            format: int64
          description: |
            The checkInstIds field shall hold the object instance identifiers of the CheckIdentity objects to be updated.
            If the checkInstIds list contains either NULL or '0' an INVALID error shall be raised.
            The supplied object instance identifiers shall match existing identity objects, an UNKNOWN error shall be raised if this is not the case.
            If the check to be updated is currently being used by a CheckLink object, a REFERENCED error shall be raised.
        checkDefDetails:
          $ref: '#/components/schemas/mc/check/CheckDefinitionDetails'
          description: |
            The checkDefDetails field shall contain the replacement CheckDefinitionDetails.
            The two lists shall be ordered the same.
            The number of entries in the two lists shall be the same size otherwise an INVALID error shall be raised.
            Only one of nominalTime and nominalCount is permitted to be zero, an INVALID error shall be returned if this is not the case.
            Only one of violationTime and violationCount is permitted to be zero, an INVALID error shall be returned if this is not the case.
            If an error is raised then no definitions shall be updated as a result of this operation call.
            The provider shall create new actual check definition objects and store them in the COM archive.
            The new definition object shall be the current definition used for the specific CheckIdentity.
    Check_updateDefinition_response:
      type: object
      properties:
        transactionId:
          type: string
          description: A unique identifier to map the response (receive message) to the request (send message). If no request message exists then this unique identifier can be used to track the sequence order of the received messages.
        newObjInstIds:
          type: array
          items:
            type: integer
            format: int64
          description: |
            The response shall contain the list of object instance identifiers for the new check definition objects.
            The returned list shall maintain the same order as the submitted definitions.
    Check_updateDefinition_error:
      type: object
      properties:
        transactionId:
          type: string
          description: A unique identifier to map the response (receive message) to the request (send message). If no request message exists then this unique identifier can be used to track the sequence order of the received messages.
        area:
          type: string
          description: The area in which the error applies.
          enum:
            - COM
            - MAL
            - MC
        name:
          type: string
          description: A code representing the error.
          enum:
            - UNKNOWN
            - REFERENCED
            - INVALID
        extraInformation:
          type: array
          items:
            type: integer
            format: uint32
            description: A list of the indexes of the error values shall be contained in the extra information field.
    mc:
      check:
        CheckDefinitionDetails:
          properties:
            checkSeverity:
              $ref: '#/components/schemas/mc/Severity'
              description: Indicates the seriousness of the violation based on its possible
                negative consequences.
            description:
              description: The description of the check. May be empty.
              type: string
            maxReportingInterval:
              description: Maximum interval that can elapse between generations of CheckResult
                reports. If this value expires, then a CheckResult is generated with the same
                state for the previous and current state. If set to '0', then no maximum reporting
                interval shall be applied.
              format: uint64
              type: number
            nominalCount:
              description: Number of consecutive valid samples passing the check for the check
                to be OK.
              format: uint32
              type: integer
            nominalTime:
              description: If nominalCount is zero then this is duration that a parameter is
                continuously passing the check for the check to be OK. If nominalCount is not
                zero then this is the period over which samples will be used in the nominalCount
                calculation, i.e. samples further in the past than nominalTime are not considered.
              format: uint64
              type: number
            violationCount:
              description: Number of consecutive valid samples violating the check for the check
                to be in violation.
              format: uint32
              type: integer
            violationTime:
              description: If violationCount is zero then this is duration that a parameter
                is continuously violating the check for the check to be in violation. If violationCount
                not zero then this is the period over which samples will be used in the violationCount
                calculation, i.e. samples further in the past than violationTime are not considered.
              format: uint64
              type: number
          type: object
      Severity:
        description: 'The severity enumeration holds the possible values for a severity. The
          numerical value represents the increasing severity, therefore CRITICAL is more severe
          than ALARM. Normally, for checks, only the Warning and Critical ranges are used:
          the colour yellow is associated with Warning, and the colour red is associated with
          Critical.'
        enum:
        - INFORMATIONAL
        - WARNING
        - ALARM
        - SEVERE
        - CRITICAL
        type: string
  messages:
    Check_updateDefinition_request:
      description: Check updateDefinition request submission
      payload:
        $ref: '#/components/schemas/Check_updateDefinition_request'
    Check_updateDefinition_response:
      description: Check updateDefinition update response
      payload:
        $ref: '#/components/schemas/Check_updateDefinition_response'
    Check_updateDefinition_error:
      description: Check updateDefinition error response
      payload:
        $ref: '#/components/schemas/Check_updateDefinition_error'
