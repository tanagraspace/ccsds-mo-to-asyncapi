asyncapi: 3.0.0
info:
  title: Aggregation Service updateDefinition API
  version: 1.0.0
  description: This API allows clients to interact with the updateDefinition interaction of the Aggregation Service.
defaultContentType: application/json
servers:
  production:
    host: 'localhost:{port}'
    protocol: mqtt
    description: MQTT server for the Aggregation Service's updateDefinition interaction.
    variables:
      port:
        default: '8883'
channels:
  Send_Aggregation_updateDefinition:
    address: Send_Aggregation_updateDefinition
    messages:
      Aggregation.updateDefinition_Send.message:
        $ref: '#/components/messages/Aggregation_updateDefinition_Send'
    description: >
      Send a **Aggregation_updateDefinition_Send** message in this channel to receive a
      **Aggregation_updateDefinition_Receive** message over the **Receive_Aggregation_updateDefinition** channel.
  Receive_Aggregation_updateDefinition:
    address: Receive_Aggregation_updateDefinition
    messages:
      Aggregation.updateDefinition_Receive.message:
        $ref: '#/components/messages/Aggregation_updateDefinition_Receive'
    description: >
      Use this channel to receive Aggregation updateDefinition responses as **Aggregation_updateDefinition_Receive**
      messages.
  Error_Aggregation_updateDefinition:
    address: Error_Aggregation_updateDefinition
    messages:
      Aggregation.updateDefinition_Error.message:
        $ref: '#/components/messages/Aggregation_updateDefinition_Error'
    description: >
      Use this channel to receive Aggregation updateDefinition errors as **Aggregation_updateDefinition_ReceiveErrors**
      messages.
operations:
  Aggregation_updateDefinition_Send:
    action: send
    channel:
      $ref: '#/channels/Send_Aggregation_updateDefinition'
    messages:
      - $ref: '#/channels/Send_Aggregation_updateDefinition/messages/Aggregation.updateDefinition_Send.message'
  Aggregation_updateDefinition_Receive:
    action: receive
    channel:
      $ref: '#/channels/Receive_Aggregation_updateDefinition'
    messages:
      - $ref: '#/channels/Receive_Aggregation_updateDefinition/messages/Aggregation.updateDefinition_Receive.message'
  Aggregation_updateDefinition_Error:
    action: receive
    channel:
      $ref: '#/channels/Error_Aggregation_updateDefinition'
    messages:
      - $ref: '#/channels/Error_Aggregation_updateDefinition/messages/Aggregation.updateDefinition_Error.message'
components:
  schemas:
    Aggregation_updateDefinition_Send:
      type: object
      properties:
        transactionId:
          type: string
          description: A unique identifier to map the response (receive message) to the request (send message). If no request message exists then this unique identifier can be used to track the sequence order of the received messages.
        aggInstIds:
          type: array
          items:
            type: integer
            format: int64
          description: |
            The aggInstIds field shall contain the object instance identifiers of the AggregationIdentity objects to be updated.
            The supplied object instance identifiers shall match existing identity objects, an UNKNOWN error shall be raised if this is not the case.
            If the aggInstIds list contains either NULL or '0' an INVALID error shall be raised.
        aggDefDetails:
          $ref: '#/components/schemas/mc/aggregation/AggregationDefinitionDetails'
          description: |
            The aggDefDetails field shall contain the replacement AggregationDefinitionDetails.
            The two lists shall be ordered the same.
            The number of entries in the two lists shall be the same size otherwise an INVALID error shall be returned.
            If the supplied reportInterval or sampleInterval values are not supported by the provider then an INVALID error shall be returned.
            If an error is raised then no definitions shall be updated as a result of this operation call.
            The provider shall create a new AggregationDefinition object and store it in the COM archive.
            The new AggregationDefinition object shall be the current AggregationDefinition used for the specific AggregationIdentity.
    Aggregation_updateDefinition_Receive:
      type: object
      properties:
        transactionId:
          type: string
          description: A unique identifier to map the response (receive message) to the request (send message). If no request message exists then this unique identifier can be used to track the sequence order of the received messages.
        newObjInstIds:
          type: array
          items:
            type: integer
            format: int64
          description: |
            The response shall contain the list of object instance identifiers for the new AggregationDefinition objects.
            The returned list shall maintain the same order as the submitted definitions.
    Aggregation_updateDefinition_Error:
      type: object
      properties:
        transactionId:
          type: string
          description: A unique identifier to map the response (receive message) to the request (send message). If no request message exists then this unique identifier can be used to track the sequence order of the received messages.
        area:
          type: string
          description: The area in which the error applies.
          enum:
            - MAL
            - COM
        name:
          type: string
          description: A code representing the error.
          enum:
            - UNKNOWN
            - INVALID
        extraInformation:
          type: array
          items:
            type: integer
            format: uint32
            description: A list of the indexes of the error values shall be contained in the extra information field.
    mc:
      aggregation:
        AggregationDefinitionDetails:
          properties:
            category:
              description: Category of the aggregation. Value taken from AggregationCategory
                enumeration, although the use of a UOctet allows deployment specific extension.
                Extensions must use values greater than 127.
              format: uint8
              type: integer
            description:
              description: The description of the parameter. May be empty.
              type: string
            filterEnabled:
              description: Controls whether reports for this aggregation are to be filtered.
              type: boolean
            filteredTimeout:
              description: The maximum duration between filtered reports. If this value is exceeded,
                then a report is sent regardless of filtered thresholds. Ignored if not filtered.
              format: uint64
              type: number
            generationEnabled:
              description: Controls whether reports for this aggregation are to be generated.
              type: boolean
            parameterSets:
              description: List containing the parameter sets which define the aggregation.
              items:
                $ref: '#/components/schemas/mc/aggregation/AggregationParameterSet'
              type: array
            reportInterval:
              description: The interval between periodic reports on this aggregation. If this
                aggregation is not periodic, this field must be '0'.
              format: uint64
              type: number
            sendDefinitions:
              description: If TRUE reports will include the ParameterDefinition object instance
                identifier in the AggregationParameterValue, if FALSE it will be set to NULL.
              type: boolean
            sendUnchanged:
              description: If TRUE reports will include all values regardless of whether changed,
                if FALSE values unchanged from previous report are replaced with a NULL.
              type: boolean
          type: object
        AggregationParameterSet:
          properties:
            domain:
              description: The domain of the parameters being referenced in this set of parameters,
                NULL if the same domain as the aggregation.
              items:
                type: string
              type: array
            parameters:
              description: The list of object instance identifiers of the ParameterIdentity
                objects being included in the aggregation.
              items:
                type: integer
              type: array
            reportFilter:
              $ref: '#/components/schemas/mc/aggregation/ThresholdFilter'
              description: If the AggregationParameterSet contains a single parameter then this
                field contains the filter to apply for filtered reports when filters are applied.
                NULL if no filter required or this set contains more than one parameter.
            sampleInterval:
              description: The interval between samples of the parameters in the set. If '0'
                then just a single sample of the parameters is required per aggregation report.
              format: uint64
              type: number
          type: object
        ThresholdFilter:
          properties:
            thresholdType:
              $ref: '#/components/schemas/mc/aggregation/ThresholdType'
              description: The type of filter to apply for filtered periodic reports when filters
                are applied.
            thresholdValue:
              description: Threshold value to apply.
              type: string
            useConverted:
              description: If true, and the relevant Parameter has a conversion, then use the
                converted value for the threshold comparison, otherwise use the raw value.
              type: boolean
          type: object
        ThresholdType:
          description: ThresholdType is an enumeration definition holding the types of filtering
            thresholds.
          enum:
          - PERCENTAGE
          - DELTA
          type: string
  messages:
    Aggregation_updateDefinition_Send:
      description: Aggregation updateDefinition request submission
      payload:
        $ref: '#/components/schemas/Aggregation_updateDefinition_Send'
    Aggregation_updateDefinition_Receive:
      description: Aggregation updateDefinition update response
      payload:
        $ref: '#/components/schemas/Aggregation_updateDefinition_Receive'
    Aggregation_updateDefinition_Error:
      description: Aggregation updateDefinition error response
      payload:
        $ref: '#/components/schemas/Aggregation_updateDefinition_Error'
